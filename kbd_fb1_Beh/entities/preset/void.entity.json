{
    "format_version": "1.17.0",
    "minecraft:entity": {
        "description": {
            "identifier": "common:void",
            "is_spawnable": false,
            "is_summonable": false,
            "is_experimental": false
        },
        "component_groups": {
            // 枚举皮肤
            "skin:type1": {
                "minecraft:skin_id": {
                    "value": 1
                }
            },
            "skin:type2": {
                "minecraft:skin_id": {
                    "value": 2
                }
            },
            "skin:type3": {
                "minecraft:skin_id": {
                    "value": 3
                }
            },
            "skin:type4": {
                "minecraft:skin_id": {
                    "value": 4
                }
            },
            "skin:type5": {
                "minecraft:skin_id": {
                    "value": 5
                }
            },
            "skin:type6": {
                "minecraft:skin_id": {
                    "value": 6
                }
            },
            "skin:type7": {
                "minecraft:skin_id": {
                    "value": 7
                }
            },
            "skin:type8": {
                "minecraft:skin_id": {
                    "value": 8
                }
            },
            "skin:type9": {
                "minecraft:skin_id": {
                    "value": 9
                }
            },
            "skin:type10": {
                "minecraft:skin_id": {
                    "value": 10
                }
            },
            "skin:type11": {
                "minecraft:skin_id": {
                    "value": 11
                }
            },
            "skin:type12": {
                "minecraft:skin_id": {
                    "value": 12
                }
            },
            "skin:type13": {
                "minecraft:skin_id": {
                    "value": 13
                }
            },
            "skin:type14": {
                "minecraft:skin_id": {
                    "value": 14
                }
            },
            "skin:type15": {
                "minecraft:skin_id": {
                    "value": 15
                }
            },
            // 数据组件
            "mould:data_int": {
                "minecraft:skin_id": {
                    "value": 0
                },
                "minecraft:variant": {
                    "value": 0
                },
                "minecraft:mark_variant": {
                    "value": 0
                }
            },
            // 属性组件
            "mould:attr": {
                "minecraft:health": {
                    "value": 20,
                    "max": 20
                },
                "minecraft:attack": {
                    "damage": 1
                },
                "minecraft:flying_speed": {
                    "value": 1.2
                },
                "minecraft:movement": {
                    "value": 0.25
                },
                "minecraft:collision_box": {
                    "width": 0.6,
                    "height": 1.9
                },
                "minecraft:knockback_resistance": {
                    "value": 100,
                    "max": 100
                },
                "minecraft:experience_reward": {
                    "on_bred": "Math.Random(1,7)",
                    "on_death": "query.last_hit_by_player ? Math.Random(1,3) : 0"
                },
                "minecraft:ageable": {
                    // List of items that the entity drops when it grows up.
                    "drop_items": [
                        "minecraft:apple"
                    ],
                    // Amount of time before the entity grows up, -1 for always a baby.
                    "duration": 1200,
                    // List of items that can be fed to the entity. Includes 'item' for the item name and 'growth' to define how much time it grows up by
                    "feed_items": [
                        {
                            "item": "minecraft:apple",
                            "growth": 20
                        }
                    ],
                    "grow_up": {
                        "event": "",
                        "target": "self"
                    }
                    // 	The feed item used will transform to this item upon successful interaction. Format: itemName:auxValue
                    //                    "transform_to_item": ""
                },
                "minecraft:scale": {
                    "value": 6.0
                }
            },
            // 状态组件
            "mould:state": {
                "minecraft:is_baby": {
                },
                "minecraft:is_charged": {
                },
                "minecraft:is_chested": {
                },
                "minecraft:is_ignited": {
                },
                "minecraft:is_saddled": {
                },
                "minecraft:is_shaking": {
                },
                "minecraft:is_sheared": {
                },
                "minecraft:is_stackable": {
                },
                "minecraft:is_stunned": {
                },
                "minecraft:is_tamed": {
                },
                "minecraft:angry": {
                    "angry_sound": "",
                    "broadcast_anger": false,
                    // 	If true, other entities of the same entity definition within the broadcastRange will also become angry whenever this mob attacks
                    "broadcast_anger_on_attack": false,
                    // 	If true, other entities of the same entity definition within the broadcastRange will also become angry whenever this mob is attacked
                    "broadcast_anger_on_being_attacked": false,
                    "broadcast_filters": {},
                    "broadcast_range": 20,
                    // A list of entity families to broadcast anger to
                    "broadcast_targets": [],
                    // Event to run after the number of seconds specified in duration expires (when the entity stops being 'angry')
                    "calm_event": {
                        "event": "",
                        "target": "self"
                    },
                    // The amount of time in seconds that the entity will be angry
                    "duration": 25,
                    // Variance in seconds added to the duration [-delta, delta]
                    "duration_delta": 0,
                    "filters": {},
                    "sound_interval": 0
                },
                "minecraft:boss": {
                    "should_darken_sky": true,
                    "hud_range": 128,
                    "name": "§cBoss"
                },
                "minecraft:damage_over_time": {
                    "damage_per_hurt": 1,
                    "time_between_hurt": 3
                },
                "minecraft:persistent": {
                }
            },
            // 能力组件
            "mould:ability": {
                "minecraft:can_climb": {
                },
                "minecraft:can_fly": {
                },
                "minecraft:can_power_jump": {
                },
                "minecraft:fire_immune": {
                },
                "minecraft:healable": {
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    // Determines if item can be used regardless of entity being at full health.
                    "force_use": false,
                    "items": [
                        {
                            "item": "minecraft:apple",
                            "heal_amount": 2
                        }
                    ]
                },
                "minecraft:transformation": {
                    "into": "minecraft:pig",
                    "delay": {
                        "value": 0.01
                    },
                    "drop_equipment": true
                }
            },
            // 战利品组件
            "mould:loot": {
                "minecraft:equipment": {
                    "table": "loot_tables/entities/zombie.json"
                },
                "minecraft:loot": {
                    "table": "loot_tables/entities/zombie.json"
                }
            },
            // 触发器组件
            "mould:trigger": {
                "minecraft:on_death": {
                    "event": "event:on_death",
                    "target": "self"
                },
                "minecraft:timer": {
                    "looping": false,
                    "time": 4.0,
                    "time_down_event": {
                        "event": "event:reset_timer"
                    }
                },
                "minecraft:lookat": {
                    "search_radius": 64.0,
                    "set_target": true,
                    "look_cooldown": 5.0,
                    "filters": {
                        "all_of": [
                            {
                                "subject": "other",
                                "test": "is_family",
                                "value": "player"
                            },
                            {
                                "test": "has_equipment",
                                "domain": "head",
                                "subject": "other",
                                "operator": "not",
                                "value": "carved_pumpkin"
                            }
                        ]
                    }
                }
            },
            // 物理组件
            "mould:physics": {
                "minecraft:physics": {
                },
                "minecraft:pushable": {
                    "is_pushable": true,
                    "is_pushable_by_piston": true
                }
            },
            "mould:move": {
                "minecraft:movement.basic": {
                },
                "minecraft:movement": {
                    "value": 0.25
                },
                "minecraft:movement.glide": {
                    "start_speed": 0.1,
                    "speed_when_turning": 0.2
                }
                //                "minecraft:navigation.walk": {
                //                    // Boolean	Tells the pathfinder to avoid blocks that cause damage when finding a path
                //                    avoid_damage_blocks: false,
                //                    // Boolean	Tells the pathfinder to avoid portals (like nether portals) when finding a path
                //                    avoid_portals: false,
                //                    // Boolean	Whether or not the pathfinder should avoid tiles that are exposed to the sun when creating paths
                //                    avoid_sun: false,
                //                    // Boolean	Tells the pathfinder to avoid water when creating a path
                //                    avoid_water: false,
                //                    // List	Tells the pathfinder which blocks to avoid when creating a path
                //                    blocks_to_avoid: [],
                //                    // Boolean	Tells the pathfinder whether or not it can jump out of water (like a dolphin)
                //                    can_breach: false,
                //                    // Boolean	Tells the pathfinder that it can path through a closed door and break it
                //                    can_break_doors: false,
                //                    // Boolean	Tells the pathfinder whether or not it can jump up blocks
                //                    can_jump: true,
                //                    // Boolean	Tells the pathfinder that it can path through a closed door assuming the AI will open the door
                //                    can_open_doors: false,
                //                    // Boolean	Tells the pathfinder that it can path through a closed iron door assuming the AI will open the door
                //                    can_open_iron_doors: false,
                //                    // Boolean	Whether a path can be created through a door
                //                    can_pass_doors: true,
                //                    // Boolean	Tells the pathfinder that it can start pathing when in the air
                //                    can_path_from_air: false,
                //                    // Boolean	Tells the pathfinder whether or not it can travel on the surface of the lava
                //                    can_path_over_lava: false,
                //                    // Boolean	Tells the pathfinder whether or not it can travel on the surface of the water
                //                    can_path_over_water: false,
                //                    // Boolean	Tells the pathfinder whether or not it will be pulled down by gravity while in water
                //                    can_sink: true,
                //                    // Boolean	Tells the pathfinder whether or not it can path anywhere through water and plays swimming animation along that path
                //                    can_swim: false,
                //                    // Boolean	Tells the pathfinder whether or not it can walk on the ground outside water
                //                    can_walk: true,
                //                    // Boolean	Tells the pathfinder whether or not it can travel in lava like walking on ground
                //                    can_walk_in_lava: false,
                //                    // Boolean	Tells the pathfinder whether or not it can walk on the ground underwater
                //                    is_amphibious: false
                //                }
            },
            "mould:jump": {
                "minecraft:can_power_jump": {
                },
                "minecraft:horse.jump_strength": {
                    "value": 1.0
                },
                "minecraft:jump.static": {
                }
            },
            // 探测器组件
            "mould:sensor": {
                "minecraft:on_hurt": {
                    // Adds a trigger to call when this entity takes damage.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:on_hurt_by_player": {
                    // Adds a trigger to call when this entity is attacked by the player.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:damage_sensor": {
                    "triggers": {
                        "cause": "all",
                        "deals_damage": false
                    }
                },
                "minecraft:environment_sensor": {
                    "triggers": {
                        "filters": {
                            "test": "is_underwater",
                            "subject": "self",
                            "operator": "==",
                            "value": true
                        },
                        "event": "minecraft:melee_mode"
                    }
                },
                "minecraft:target_nearby_sensor": {
                    "must_see": true,
                    "inside_range": 16,
                    "outside_range": 17,
                    "on_inside_range": {
                        "target": "self",
                        "event": "event"
                    },
                    "on_outside_range": {
                        "target": "self",
                        "event": "event"
                    },
                    "on_vision_lost_inside_range": {
                        "target": "self",
                        "event": "event"
                    }
                },
                "minecraft:on_friendly_anger": {
                    // Adds a trigger that will run when a nearby entity of the same type as this entity becomes Angry.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:on_ignite": {
                    // Adds a trigger to call when this entity is set on fire.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:on_target_acquired": {
                    // Adds a trigger to call when this entity finds a target.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:on_target_escape": {
                    // Adds a trigger to call when this entity loses the target it currently has.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                },
                "minecraft:on_wake_with_owner": {
                    // Adds a trigger to call when this pet's owner awakes after sleeping with the pet.
                    "event": "",
                    "filters": {
                        "test": "is_underwater",
                        "subject": "self",
                        "operator": "==",
                        "value": true
                    },
                    "target": "self"
                }
            },
            // 行为组件
            "mould:behaviour": {
                "minecraft:behavior.melee_attack": {
                    "priority": 5,
                    "speed_multiplier": 1.0,
                    "track_target": true,
                    "reach_multiplier": 0.0
                    // this prevents creepers from ocasionally performing melee attacks while using this goal to chase
                },
                "minecraft:behavior.delayed_attack": {
                    "priority": 4,
                    "reach_multiplier": 2,
                    "attack_duration": 3,
                    "hit_delay_pct": 0.37,
                    "track_target": true,
                    "sound_event": "attack.strong"
                },
                "minecraft:behavior.swoop_attack": {
                    "priority": 2,
                    "delay_range": 0.0,
                    "damage_reach": 3.0,
                    "speed_multiplier": 2.5
                },
                "minecraft:behavior.circle_around_anchor": {
                    "priority": 3,
                    "radius_change": 1,
                    "radius_adjustment_chance": 0.004,
                    "height_adjustment_chance": 0.002857,
                    "goal_radius": 64,
                    "radius_range": [
                        5,
                        15
                    ],
                    "height_offset_range": [
                        -4,
                        5
                    ],
                    "height_above_target_range": [
                        10,
                        20
                    ]
                },
                "minecraft:behavior.summon_entity": {
                    "priority": 2,
                    "summon_choices": [
                        {
                            "min_activation_range": 1.0,
                            "max_activation_range": 16.0,
                            "cooldown_time": 1.0,
                            "weight": 1,
                            "cast_duration": 1.0,
                            "particle_color": "#FF664D59",
                            "start_sound_event": "cast.spell",
                            "sequence": [
                                {
                                    "shape": "circle",
                                    "target": "self",
                                    "base_delay": 0.0,
                                    "delay_per_summon": 0.0,
                                    "num_entities_spawned": 1,
                                    "entity_type": "minecraft:pig",
                                    "size": 0,
                                    "entity_lifespan": 0.2,
                                    "sound_event": "prepare.attack"
                                }
                            ]
                        }
                    ]
                },
                "minecraft:behavior.ranged_attack": {
                    "attack_interval_min": 1,
                    "attack_interval_max": 3,
                    "attack_radius": 32
                },
                "minecraft:behavior.nearest_prioritized_attackable_target": {
                    "priority": 3,
                    "within_radius": 12.0,
                    "persist_time": 2.0,
                    "must_see": true,
                    "entity_types": [
                        {
                            "filters": {
                                "test": "is_family",
                                "subject": "other",
                                "value": "player"
                            },
                            "max_dist": 32,
                            "priority": 0
                        }
                    ]
                },
                "minecraft:behavior.hurt_by_target": {
                    "priority": 1,
                    // Boolean: If true, nearby mobs of the same type will be alerted about the damage
                    "alert_same_type": false,
                    // JSON Object: List of entity types that this mob can target if they hurt their owner
                    "entity_types": {
                        "filters": {
                            "all_of": [
                                {
                                    "test": "is_family",
                                    "subject": "other",
                                    "operator": "==",
                                    "value": "player"
                                }
                            ]
                        }
                    },
                    // Boolean: If true, the mob will hurt its owner and other mobs with the same owner as itself
                    "hurt_owner": false
                },
                "minecraft:behavior.nearest_attackable_target": {
                    "priority": 2,
                    // Integer	Time range (in seconds) between searching for an attack target, range is in (0, "attack_interval"].
                    // Only used if "attack_interval" is greater than 0, otherwise "scan_interval" is used.
                    "attack_interval": 0,
                    // Integer	Alias for "attack_interval"; provides the same functionality as "attack_interval".
                    "attack_interval_min": 0,
                    // Boolean	If true, this entity can attack its owner
                    "attack_owner": false,
                    // JSON Object	Filters which types of targets are valid for this entity (Please see entity_types' definition page)
                    "entity_types": {
                        "filters": {
                            "all_of": [
                                {
                                    "test": "is_family",
                                    "subject": "other",
                                    "operator": "==",
                                    "value": "player"
                                }
                            ]
                        }
                    },
                    // Boolean	If true, this entity requires a path to the target.
                    "must_reach": false,
                    // Boolean	Determines if target-validity requires this entity to be in range only, or both in range and in sight
                    "must_see": true,
                    // Decimal	Time (in seconds) the target must not be seen by this entity to become invalid. Used only if "must_see" is true.
                    "must_see_forget_duration": 3.0,
                    // Decimal	Time (in seconds) this entity can continue attacking the target after the target is no longer valid.
                    "persist_time": 0.0,
                    // Boolean	Allows the attacking entity to update the nearest target,
                    // otherwise a target is only reselected after each "scan_interval" or "attack_interval".
                    "reselect_targets": false,
                    // Integer	If "attack_interval" is 0 or isn't declared, then between attacks:
                    // scanning for a new target occurs every amount of ticks equal to "scan_interval", minimum value is 1.
                    // Values under 10 can affect performance.
                    "scan_interval": 10,
                    // Boolean	Allows the actor to be set to persist upon targeting a player.
                    "set_persistent": false,
                    // Decimal	Multiplied with the target's armor coverage percentage to modify "max_dist" when detecting an invisible target.
                    "target_invisible_multiplier": 0.7,
                    // Decimal	Maximum vertical target-search distance, if it's greater than the target type's "max_dist".
                    // A negative value defaults to "entity_types" greatest "max_dist".
                    "target_search_height": -1.0,
                    // Decimal	Multiplied with the target type's "max_dist" when trying to detect a sneaking target.
                    "target_sneak_visibility_multiplier": 0.8,
                    // Decimal	Maximum distance this entity can be from the target when following it, otherwise the target becomes invalid.
                    // This value is only used if the entity doesn't declare "minecraft:follow_range".
                    "within_radius": 64.0
                },
                "minecraft:behavior.random_stroll": {
                    "priority": 48,
                    "speed_multiplier": 1
                },
                "minecraft:behavior.look_at_player": {
                    "priority": 49,
                    // Integer: The angle in degrees that the mob can see in the X-axis (left-right)
                    "angle_of_view_horizontal": 360,
                    // Integer: The angle in degrees that the mob can see in the Y-axis (up-down)
                    "angle_of_view_vertical": 360,
                    // Decimal: The distance in blocks from which the entity will look at
                    "look_distance": 8.0,
                    // Range[a, b]: Time range to look at the entity
                    "look_time": [
                        2,
                        4
                    ],
                    // Decimal: The probability of looking at the target. A value of 1.00 is 100%
                    "probability": 0.02
                },
                "minecraft:behavior.look_at_entity": {
                    "priority": 49,
                    // Integer: The angle in degrees that the mob can see in the X-axis (left-right)
                    "angle_of_view_horizontal": 360,
                    // Integer: The angle in degrees that the mob can see in the Y-axis (up-down)
                    "angle_of_view_vertical": 360,
                    // Decimal: The distance in blocks from which the entity will look at
                    "look_distance": 8.0,
                    // Range[a, b]: Time range to look at the entity
                    "look_time": [
                        2,
                        4
                    ],
                    // Decimal: The probability of looking at the target. A value of 1.00 is 100%
                    "probability": 0.02
                },
                "minecraft:behavior.look_at_target": {
                    "priority": 49,
                    // Integer: The angle in degrees that the mob can see in the X-axis (left-right)
                    "angle_of_view_horizontal": 360,
                    // Integer: The angle in degrees that the mob can see in the Y-axis (up-down)
                    "angle_of_view_vertical": 360,
                    // Decimal: The distance in blocks from which the entity will look at
                    "look_distance": 8.0,
                    // Range[a, b]: Time range to look at the entity
                    "look_time": [
                        2,
                        4
                    ],
                    // Decimal: The probability of looking at the target. A value of 1.00 is 100%
                    "probability": 0.02
                },
                "minecraft:behavior.look_at_trading_player": {
                    "priority": 49,
                    // Integer: The angle in degrees that the mob can see in the X-axis (left-right)
                    "angle_of_view_horizontal": 360,
                    // Integer: The angle in degrees that the mob can see in the Y-axis (up-down)
                    "angle_of_view_vertical": 360,
                    // Decimal: The distance in blocks from which the entity will look at
                    "look_distance": 8.0,
                    // Range[a, b]: Time range to look at the entity
                    "look_time": [
                        2,
                        4
                    ],
                    // Decimal: The probability of looking at the target. A value of 1.00 is 100%
                    "probability": 0.02
                },
                "minecraft:behavior.random_look_around": {
                    "priority": 50,
                    // Range[a, b]: The range of time in seconds the mob will stay looking in a random direction before looking elsewhere
                    "look_time": [
                        2,
                        4
                    ]
                },
                "minecraft:behavior.avoid_mob_type": {
                    "priority": 1,
                    "entity_types": [
                        {
                            "filters": {
                                "any_of": [
                                    {
                                        "test": "is_family",
                                        "subject": "other",
                                        "value": "player"
                                    }
                                ]
                            },
                            "max_dist": 16,
                            "sprint_speed_multiplier": 1.2
                        }
                    ]
                },
                "minecraft:behavior.move_indoors": {
                    "priority": 4,
                    "speed_multiplier": 0.8
                },
                "minecraft:behavior.open_door": {
                    "priority": 6,
                    "close_door_after": true
                },
                "minecraft:behavior.float": {
                    "priority": 0
                }
            },
            // 商店组件
            "mould:trade": {
                "minecraft:behavior.trade_with_player": {
                },
                "minecraft:trade_resupply": {
                },
                "minecraft:economy_trade_table": {
                    "display_name": "商店",
                    "table": "trading/demo.json",
                    "new_screen": true,
                    "persist_trades": true
                }
            },
            // 交互组件
            "mould:can_interact": {
                "minecraft:interact": {
                    "interactions": [
                        {
                            "on_interact": {
                                "filters": {
                                    "test": "is_family",
                                    "subject": "other",
                                    "value": "player"
                                },
                                "event": "event:interact",
                                "target": "self"
                            },
                            "interact_text": "对话"
                        }
                    ]
                }
            },
            // 驯服组件
            "mould:tamp": {
                // 设置可驯服
                "minecraft:tameable": {
                    "probability": 0.33,
                    "tame_items": [
                        "fish",
                        "salmon"
                    ],
                    "tame_event": {
                        "event": "event:active_tame",
                        "target": "self"
                    }
                },
                // 设置已驯服
                "minecraft:is_tamed": {
                },
                // 可骑乘
                "minecraft:rideable": {
                    "seat_count": 1,
                    "crouching_skip_interact": true,
                    "family_types": [
                        "player"
                    ],
                    "interact_text": "§f骑乘",
                    "seats": {
                        "position": [
                            0,
                            0,
                            0
                        ]
                    }
                },
                "minecraft:behavior.player_ride_tamed": {
                },
                "minecraft:input_ground_controlled": {
                }
            },
            // 优化组件
            "mould:optimize": {
                "minecraft:conditional_bandwidth_optimization": {
                },
                "minecraft:despawn": {
                    "despawn_from_distance": {
                    }
                }
            },
            // 普通实体基础组件-模板
            "mould:entity.base": {
                "minecraft:health": {
                    "value": 20,
                    "max": 20
                },
                "minecraft:attack": {
                    "damage": 1
                },
                "minecraft:jump.static": {
                },
                "minecraft:movement.basic": {
                },
                "minecraft:movement": {
                    "value": 0.25
                },
                "minecraft:navigation.walk": {
                    "is_amphibious": true,
                    "can_walk": true,
                    "can_jump": true
                },
                "minecraft:follow_range": {
                    "value": 100,
                    "max": 100
                },
                "minecraft:loot": {
                    "table": "loot_tables/entities/zombie.json"
                },
                "minecraft:physics": {
                },
                "minecraft:pushable": {
                    "is_pushable": true,
                    "is_pushable_by_piston": true
                },
                "minecraft:nameable": {
                    "allow_name_tag_renaming": true,
                    "always_show": true
                },
                "minecraft:type_family": {
                    "family": [
                        "mob"
                    ]
                },
                "minecraft:collision_box": {
                    "width": 0.6,
                    "height": 1.9
                },
                // 行为组件
                "minecraft:behavior.hurt_by_target": {
                    "priority": 1,
                    // Boolean: If true, nearby mobs of the same type will be alerted about the damage
                    "alert_same_type": false,
                    // JSON Object: List of entity types that this mob can target if they hurt their owner
                    "entity_types": {
                        "filters": {
                            "all_of": [
                                {
                                    "test": "is_family",
                                    "subject": "other",
                                    "operator": "!=",
                                    "value": "detector"
                                }
                            ]
                        }
                    },
                    // Boolean: If true, the mob will hurt its owner and other mobs with the same owner as itself
                    "hurt_owner": false
                },
                "minecraft:behavior.random_stroll": {
                    "priority": 48,
                    "speed_multiplier": 1
                },
                "minecraft:behavior.look_at_player": {
                    "priority": 49,
                    // Integer: The angle in degrees that the mob can see in the X-axis (left-right)
                    "angle_of_view_horizontal": 360,
                    // Integer: The angle in degrees that the mob can see in the Y-axis (up-down)
                    "angle_of_view_vertical": 360,
                    // Decimal: The distance in blocks from which the entity will look at
                    "look_distance": 8.0,
                    // Range[a, b]: Time range to look at the entity
                    "look_time": [
                        2,
                        4
                    ],
                    // Decimal: The probability of looking at the target. A value of 1.00 is 100%
                    "probability": 0.02
                },
                "minecraft:behavior.random_look_around": {
                    "priority": 50,
                    // Range[a, b]: The range of time in seconds the mob will stay looking in a random direction before looking elsewhere
                    "look_time": [
                        2,
                        4
                    ]
                }
            }
        },
        "components": {
            "minecraft:despawn": {
            }
        },
        "events": {
        }
    }
}
